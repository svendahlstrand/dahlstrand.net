---
layout: post
title: ||=-operatorn i Ruby
---
I Ruby, liksom de flesta andra programmeringsspråk, finns det något som kallas _abbreviated assignment_ (förkortad tilldelning). Det är operatorer som <code>+=</code> och <code>-=</code> som låter oss lägga till respektive dra ifrån värdet på en redan existerande variabel.

Om man är ny i Ruby-världen finns det risk för förvirring när man stöter på <code>||=</code> i andras källkod. Vad gör den och vad är den bra till? Jag tänkte förklara med ett exempel.

<pre><code class="ruby">puts @count
#=> nil

@count ||= 0
puts @count #=> 0</code></pre>

Okej, vad händer här egentligen? Vi börjar med en instansvariabel <code>@count</code> som är odefinierad (<code>nil</code>). Sedan använder vi <code>||=</code>-operatorn och <code>@count</code> är nu 0. Har vi bara gjort en vanlig tilldelning?

<pre><code class="ruby">@count ||= 32
puts @count #=> 0</code></pre>

Det verkar inte så, efter en ny tilldelning är <code>@count</code> fortfarande 0. <code>||=</code> är egentligen bara en förkortning och kan skrivas om:

<pre><code class="ruby">@count = @count || 32</code></pre>

<code>||</code>-operatorn i Ruby fungerar så här: först undersöks operanden till vänster. Om den har ett värde som inte är <code>nil</code> eller <code>false</code> så returneras det värdet. Annars returneras värdet på operanden till höger.

Så om vi ska översätta den senaste raden kod till "ren svenska": sätt variabeln <code>@count</code> till 32 om <code>@count</code> inte redan har något värde.

h2. När har jag användning för detta?

Säg till exempel att du ska skriva en metod som räknar ut några värden. Dessa värden vill du lägga till en array och sedan returnera den. Du vill att användaren av din metod ska kunna skicka med en array som ska användas, men om hon inte gör det vill du skapa en ny, tom array.

<pre><code class="ruby">def my_function(results = nil)
  results ||= []
  # Gör avancerade uträkningar här
  return results
end</code></pre>